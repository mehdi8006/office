<?php

namespace Database\Seeders;

use App\Models\Cooperative;
use App\Models\MembreEleveur;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MembreEleveurSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üë• Cr√©ation des membres √©leveurs...');

        // V√©rifier qu'il y a des coop√©ratives
        $cooperatives = Cooperative::all();
        if ($cooperatives->isEmpty()) {
            throw new \Exception('‚ùå Aucune coop√©rative trouv√©e. Veuillez d\'abord ex√©cuter CooperativeSeeder.');
        }

        $this->command->info("üè≠ {$cooperatives->count()} coop√©ratives trouv√©es");

        // V√©rifier s'il y a d√©j√† des membres
        $existingMembers = MembreEleveur::count();
        if ($existingMembers > 0) {
            $this->command->info("‚ÑπÔ∏è  {$existingMembers} membres d√©j√† pr√©sents");
            
            // V√©rifier si on a assez de membres par coop√©rative
            $cooperativesSansMembres = $cooperatives->filter(function($coop) {
                return $coop->membres()->count() < 10; // Minimum 10 membres par coop√©rative
            });
            
            if ($cooperativesSansMembres->isEmpty()) {
                $this->command->info("‚úÖ Toutes les coop√©ratives ont suffisamment de membres");
                return;
            }
            
            $this->command->info("üìù {$cooperativesSansMembres->count()} coop√©ratives ont besoin de plus de membres");
            $cooperatives = $cooperativesSansMembres;
        }

        $totalMembresCreated = 0;
        $progressBar = $this->command->getOutput()->createProgressBar($cooperatives->count());
        $progressBar->start();

        foreach ($cooperatives as $cooperative) {
            $membresCreated = $this->creerMembresPourCooperative($cooperative);
            $totalMembresCreated += $membresCreated;
            $progressBar->advance();
        }

        $progressBar->finish();
        $this->command->newLine(2);

        $this->afficherStatistiques($totalMembresCreated);
    }

    /**
     * Cr√©er les membres pour une coop√©rative donn√©e
     */
    private function creerMembresPourCooperative(Cooperative $cooperative): int
    {
        // V√©rifier combien de membres cette coop√©rative a d√©j√†
        $membresExistants = $cooperative->membres()->count();
        
        // D√©terminer combien cr√©er
        $nombreTotal = $this->determinerNombreMembres($cooperative);
        $aCreer = max(0, $nombreTotal - $membresExistants);
        
        if ($aCreer === 0) {
            return 0;
        }

        try {
            // Distribution r√©aliste des statuts
            $repartition = $this->calculerRepartitionStatuts($aCreer);
            
            $created = 0;

            // Cr√©er les membres actifs
            if ($repartition['actifs'] > 0) {
                MembreEleveur::factory()
                    ->count($repartition['actifs'])
                    ->actif()
                    ->create(['id_cooperative' => $cooperative->id_cooperative]);
                $created += $repartition['actifs'];
            }

            // Cr√©er les membres inactifs
            if ($repartition['inactifs'] > 0) {
                MembreEleveur::factory()
                    ->count($repartition['inactifs'])
                    ->inactif()
                    ->create(['id_cooperative' => $cooperative->id_cooperative]);
                $created += $repartition['inactifs'];
            }

            // Cr√©er les membres en suppression
            if ($repartition['suppression'] > 0) {
                MembreEleveur::factory()
                    ->count($repartition['suppression'])
                    ->enSuppression()
                    ->create(['id_cooperative' => $cooperative->id_cooperative]);
                $created += $repartition['suppression'];
            }

            return $created;

        } catch (\Exception $e) {
            $this->command->error("‚ùå Erreur pour {$cooperative->nom_cooperative}: " . $e->getMessage());
            return 0;
        }
    }

    /**
     * D√©terminer le nombre de membres selon la taille de la coop√©rative
     */
    private function determinerNombreMembres(Cooperative $cooperative): int
    {
        // Utiliser l'ID pour une r√©partition coh√©rente
        $seed = $cooperative->id_cooperative;
        mt_srand($seed);

        // R√©partition selon diff√©rents types de coop√©ratives
        $typeCooperative = mt_rand(1, 100);

        return match (true) {
            // 10% - Tr√®s petites coop√©ratives (villages isol√©s)
            $typeCooperative <= 10 => mt_rand(8, 15),
            
            // 25% - Petites coop√©ratives 
            $typeCooperative <= 35 => mt_rand(15, 30),
            
            // 40% - Moyennes coop√©ratives
            $typeCooperative <= 75 => mt_rand(30, 60),
            
            // 20% - Grandes coop√©ratives
            $typeCooperative <= 95 => mt_rand(60, 100),
            
            // 5% - Tr√®s grandes coop√©ratives (centres urbains)
            default => mt_rand(100, 150)
        };
    }

    /**
     * Calculer la r√©partition des statuts
     */
    private function calculerRepartitionStatuts(int $total): array
    {
        // R√©partition r√©aliste : 85% actifs, 10% inactifs, 5% suppression
        $actifs = (int) round($total * 0.85);
        $inactifs = (int) round($total * 0.10);
        $suppression = $total - $actifs - $inactifs; // Le reste

        return [
            'actifs' => $actifs,
            'inactifs' => $inactifs,
            'suppression' => max(0, $suppression)
        ];
    }

    /**
     * Afficher les statistiques d√©taill√©es
     */
    private function afficherStatistiques(int $created): void
    {
        $total = MembreEleveur::count();
        
        $this->command->info("‚úÖ {$created} nouveaux membres cr√©√©s");
        $this->command->info("üìä {$total} membres au total");

        // Statistiques par statut
        $stats = DB::table('membres_eleveurs')
            ->selectRaw('
                statut,
                COUNT(*) as nombre,
                ROUND(COUNT(*) * 100.0 / ?, 1) as pourcentage
            ', [$total])
            ->groupBy('statut')
            ->get();

        $this->command->info("\nüìã R√©partition par statut:");
        foreach ($stats as $stat) {
            $emoji = match($stat->statut) {
                'actif' => 'üü¢',
                'inactif' => 'üü°',
                'suppression' => 'üî¥',
                default => '‚ö™'
            };
            $this->command->info("   {$emoji} " . ucfirst($stat->statut) . ": {$stat->nombre} ({$stat->pourcentage}%)");
        }

        // Statistiques par coop√©rative
        $this->afficherRepartitionParCooperative();

        // Top 5 des plus grandes coop√©ratives
        $this->afficherTopCooperatives();
    }

    /**
     * Afficher la r√©partition par coop√©rative
     */
    private function afficherRepartitionParCooperative(): void
    {
        $repartition = DB::table('membres_eleveurs')
            ->join('cooperatives', 'membres_eleveurs.id_cooperative', '=', 'cooperatives.id_cooperative')
            ->selectRaw('
                cooperatives.nom_cooperative,
                COUNT(*) as total_membres,
                SUM(CASE WHEN membres_eleveurs.statut = "actif" THEN 1 ELSE 0 END) as actifs
            ')
            ->groupBy('cooperatives.id_cooperative', 'cooperatives.nom_cooperative')
            ->orderBy('total_membres', 'DESC')
            ->get();

        $this->command->info("\nüè≠ R√©partition par coop√©rative:");
        foreach ($repartition as $coop) {
            $tauxActivite = $coop->total_membres > 0 ? round(($coop->actifs / $coop->total_membres) * 100, 1) : 0;
            $this->command->info("   üìä {$coop->nom_cooperative}: {$coop->total_membres} membres ({$coop->actifs} actifs - {$tauxActivite}%)");
        }
    }

    /**
     * Afficher le top 5 des coop√©ratives par nombre de membres
     */
    private function afficherTopCooperatives(): void
    {
        $top = DB::table('membres_eleveurs')
            ->join('cooperatives', 'membres_eleveurs.id_cooperative', '=', 'cooperatives.id_cooperative')
            ->selectRaw('
                cooperatives.nom_cooperative,
                COUNT(*) as total_membres,
                SUM(CASE WHEN membres_eleveurs.statut = "actif" THEN 1 ELSE 0 END) as actifs,
                MAX(membres_eleveurs.created_at) as derniere_adhesion
            ')
            ->groupBy('cooperatives.id_cooperative', 'cooperatives.nom_cooperative')
            ->orderBy('total_membres', 'DESC')
            ->limit(5)
            ->get();

        $this->command->info("\nüèÜ Top 5 des plus grandes coop√©ratives:");
        foreach ($top as $index => $coop) {
            $rang = $index + 1;
            $derniereAdhesion = \Carbon\Carbon::parse($coop->derniere_adhesion)->diffForHumans();
            $this->command->info("   {$rang}. {$coop->nom_cooperative}");
            $this->command->info("      üë• {$coop->total_membres} membres ({$coop->actifs} actifs)");
            $this->command->info("      üìÖ Derni√®re adh√©sion: {$derniereAdhesion}");
        }

        // Conseils pour la suite
        $this->afficherConseils();
    }

    /**
     * Afficher les conseils pour la suite
     */
    private function afficherConseils(): void
    {
        $totalActifs = MembreEleveur::where('statut', 'actif')->count();
        
        $this->command->info("\nüí° PROCHAINES √âTAPES:");
        $this->command->info("   ‚úÖ {$totalActifs} membres actifs pr√™ts pour les r√©ceptions de lait");
        $this->command->info("   üìù Ex√©cuter: ReceptionLaitSeeder pour g√©n√©rer l'historique");
        $this->command->info("   üîç Tester: MembreEleveur::with('cooperative')->where('statut', 'actif')->first()");
        
        $cooperativesSansMembres = Cooperative::whereDoesntHave('membres')->count();
        if ($cooperativesSansMembres > 0) {
            $this->command->warn("‚ö†Ô∏è  {$cooperativesSansMembres} coop√©ratives sans membres d√©tect√©es");
        }
    }
}
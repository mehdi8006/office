<?php

namespace Database\Seeders;

use App\Models\Cooperative;
use App\Models\Utilisateur;
use Illuminate\Database\Seeder;

class CooperativeSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üè≠ Cr√©ation des coop√©ratives laiti√®res...');

        // V√©rifier s'il y a des utilisateurs disponibles pour √™tre responsables
        $utilisateursDisponibles = Utilisateur::whereIn('role', ['gestionnaire', 'direction'])
            ->where('statut', 'actif')
            ->get();

        $nombreUtilisateurs = $utilisateursDisponibles->count();
        
        if ($nombreUtilisateurs > 0) {
            $this->command->info("‚úÖ {$nombreUtilisateurs} utilisateurs trouv√©s pour assigner comme responsables");
        } else {
            $this->command->warn("‚ö†Ô∏è  Aucun utilisateur gestionnaire trouv√©. Les coop√©ratives seront cr√©√©es sans responsable.");
        }

        // Configuration de la r√©partition g√©ographique r√©aliste
        $repartitionRegions = $this->obtenirRepartitionRegions();
        
        $totalCooperatives = 0;
        $cooperativesCreees = [];

        foreach ($repartitionRegions as $region => $config) {
            $this->command->info("üìç Cr√©ation des coop√©ratives pour la r√©gion: {$region}");
            
            $nombrePourRegion = $config['nombre'];
            $cooperativesRegion = $this->creerCooperativesPourRegion($region, $nombrePourRegion, $utilisateursDisponibles);
            
            $cooperativesCreees[$region] = $cooperativesRegion;
            $totalCooperatives += count($cooperativesRegion);
            
            $this->command->info("   ‚úÖ {$nombrePourRegion} coop√©ratives cr√©√©es dans {$region}");
        }

        // Cr√©er quelques coop√©ratives suppl√©mentaires avec responsables sp√©cifiques
        if ($nombreUtilisateurs > 0) {
            $cooperativesSpeciales = $this->creerCooperativesSpeciales($utilisateursDisponibles);
            $totalCooperatives += count($cooperativesSpeciales);
        }

        $this->afficherStatistiques($totalCooperatives, $cooperativesCreees);
    }

    /**
     * Obtenir la r√©partition r√©aliste des coop√©ratives par r√©gion
     */
    private function obtenirRepartitionRegions(): array
    {
        return [
            'Casablanca-Settat' => [
                'nombre' => 4,
                'description' => 'R√©gion √©conomique principale, fortes coop√©ratives'
            ],
            'Rabat-Sal√©-K√©nitra' => [
                'nombre' => 3,
                'description' => 'R√©gion administrative, coop√©ratives modernes'
            ],
            'F√®s-Mekn√®s' => [
                'nombre' => 3,
                'description' => 'R√©gion agricole traditionnelle'
            ],
            'B√©ni Mellal-Kh√©nifra' => [
                'nombre' => 3,
                'description' => 'Zone d\'√©levage intensive'
            ],
            'Marrakech-Safi' => [
                'nombre' => 2,
                'description' => 'Coop√©ratives touristiques et traditionnelles'
            ],
            'Souss-Massa' => [
                'nombre' => 2,
                'description' => 'Agriculture moderne et export'
            ],
            'Oriental' => [
                'nombre' => 2,
                'description' => '√âlevage extensif'
            ],
            'Tanger-T√©touan-Al Hoce√Øma' => [
                'nombre' => 2,
                'description' => 'Coop√©ratives du nord'
            ],
            'Dr√¢a-Tafilalet' => [
                'nombre' => 1,
                'description' => 'Oasis et √©levage traditionnel'
            ]
        ];
    }

    /**
     * Cr√©er les coop√©ratives pour une r√©gion donn√©e
     */
    private function creerCooperativesPourRegion(string $region, int $nombre, $utilisateurs): array
    {
        $cooperatives = [];
        
        for ($i = 0; $i < $nombre; $i++) {
            // D√©terminer si cette coop√©rative aura un responsable
            $avecResponsable = !$utilisateurs->isEmpty() && rand(1, 100) <= 70; // 70% avec responsable
            
            // D√©terminer le statut (90% actives, 10% inactives)
            $statut = rand(1, 100) <= 90 ? 'actif' : 'inactif';
            
            // Cr√©er la coop√©rative
            $cooperative = Cooperative::factory()
                ->dansRegion($region)
                ->state(['statut' => $statut]);

            // Assigner un responsable si disponible
            if ($avecResponsable) {
                $responsable = $utilisateurs->random();
                $cooperative = $cooperative->avecResponsableSpecifique($responsable->id_utilisateur);
            }

            $coop = $cooperative->create();
            $cooperatives[] = $coop;
        }

        return $cooperatives;
    }

    /**
     * Cr√©er quelques coop√©ratives sp√©ciales avec des caract√©ristiques particuli√®res
     */
    private function creerCooperativesSpeciales($utilisateurs): array
    {
        $cooperativesSpeciales = [];

        // 1. Coop√©rative pilote r√©cente
        $coopPilote = Cooperative::factory()
            ->recente()
            ->active()
            ->avecResponsableSpecifique($utilisateurs->first()->id_utilisateur)
            ->create();
        
        $cooperativesSpeciales[] = $coopPilote;

        // 2. Grande coop√©rative historique
        if ($utilisateurs->count() > 1) {
            $grandeCooperative = Cooperative::factory()
                ->state([
                    'nom_cooperative' => 'Coop√©rative Centrale du Lait Marocain',
                    'created_at' => now()->subYears(5),
                    'statut' => 'actif'
                ])
                ->avecResponsableSpecifique($utilisateurs->skip(1)->first()->id_utilisateur)
                ->create();
                
            $cooperativesSpeciales[] = $grandeCooperative;
        }

        // 3. Coop√©rative en difficult√© (inactive)
        if ($utilisateurs->count() > 2) {
            $coopDifficulte = Cooperative::factory()
                ->inactive()
                ->state([
                    'nom_cooperative' => 'Coop√©rative Al Tadamon (En Restructuration)',
                    'updated_at' => now()->subMonths(6)
                ])
                ->create(); // Sans responsable volontairement
                
            $cooperativesSpeciales[] = $coopDifficulte;
        }

        return $cooperativesSpeciales;
    }

    /**
     * Afficher les statistiques d√©taill√©es de cr√©ation
     */
    private function afficherStatistiques(int $total, array $cooperativesParRegion): void
    {
        $this->command->info("\n‚úÖ {$total} coop√©ratives cr√©√©es avec succ√®s!");

        // Statistiques par statut
        $actives = Cooperative::where('statut', 'actif')->count();
        $inactives = Cooperative::where('statut', 'inactif')->count();
        
        $this->command->info("\nüìä R√©partition par statut:");
        $this->command->info("   - Actives: {$actives} (" . round(($actives/$total)*100, 1) . "%)");
        $this->command->info("   - Inactives: {$inactives} (" . round(($inactives/$total)*100, 1) . "%)");

        // Statistiques responsables
        $avecResponsable = Cooperative::whereNotNull('responsable_id')->count();
        $sansResponsable = Cooperative::whereNull('responsable_id')->count();
        
        $this->command->info("\nüë• R√©partition des responsables:");
        $this->command->info("   - Avec responsable: {$avecResponsable}");
        $this->command->info("   - Sans responsable: {$sansResponsable}");

        // R√©partition g√©ographique
        $this->command->info("\nüó∫Ô∏è  R√©partition g√©ographique:");
        foreach ($cooperativesParRegion as $region => $cooperatives) {
            $nombreCoops = count($cooperatives);
            $pourcentage = round(($nombreCoops/$total)*100, 1);
            $this->command->info("   - {$region}: {$nombreCoops} coop√©ratives ({$pourcentage}%)");
        }

        // Informations sur les responsables assign√©s
        $this->afficherInfoResponsables();

        // Top 5 des coop√©ratives par anciennet√©
        $this->afficherTopCooperatives();

        // Conseils pour la suite
        $this->afficherConseilsSuite();
    }

    /**
     * Afficher les informations sur les responsables
     */
    private function afficherInfoResponsables(): void
    {
        $responsables = Cooperative::join('utilisateurs', 'cooperatives.responsable_id', '=', 'utilisateurs.id_utilisateur')
            ->select('utilisateurs.nom_complet', 'utilisateurs.role', 'cooperatives.nom_cooperative')
            ->get();

        if ($responsables->isNotEmpty()) {
            $this->command->info("\nüéØ Responsables assign√©s:");
            foreach ($responsables->take(5) as $resp) {
                $this->command->info("   - {$resp->nom_complet} ({$resp->role}) ‚Üí {$resp->nom_cooperative}");
            }
            
            if ($responsables->count() > 5) {
                $reste = $responsables->count() - 5;
                $this->command->info("   ... et {$reste} autres assignations");
            }
        }
    }

    /**
     * Afficher le top des coop√©ratives
     */
    private function afficherTopCooperatives(): void
    {
        $this->command->info("\nüèÜ Top 5 des coop√©ratives les plus anciennes:");
        
        $anciennes = Cooperative::orderBy('created_at', 'asc')->limit(5)->get();
        
        foreach ($anciennes as $index => $coop) {
            $anciennete = $coop->created_at->diffForHumans();
            $statut = $coop->statut === 'actif' ? '‚úÖ' : '‚ùå';
            
            $this->command->info(sprintf(
                "   %d. %s %s (cr√©√©e %s)",
                $index + 1,
                $statut,
                $coop->nom_cooperative,
                $anciennete
            ));
        }
    }

    /**
     * Afficher les conseils pour la suite
     */
    private function afficherConseilsSuite(): void
    {
        $this->command->info("\nüí° Prochaines √©tapes recommand√©es:");
        $this->command->info("   1. Ex√©cuter MembreEleveurSeeder pour peupler les coop√©ratives");
        $this->command->info("   2. V√©rifier les relations avec: php artisan tinker");
        $this->command->info("      >>> Cooperative::with('responsable')->get()");
        $this->command->info("   3. Tester les requ√™tes de base sur les coop√©ratives");
        
        // Exemples de requ√™tes utiles
        $this->command->info("\nüîç Requ√™tes utiles pour tester:");
        $this->command->info("   - Coop√©ratives actives: Cooperative::where('statut', 'actif')->count()");
        $this->command->info("   - Par r√©gion: Cooperative::where('adresse', 'like', '%Casablanca%')->get()");
        $this->command->info("   - Avec responsables: Cooperative::whereNotNull('responsable_id')->with('responsable')->get()");

        // Statistiques finales
        $totalUtilisateurs = Utilisateur::count();
        $totalCooperatives = Cooperative::count();
        
        $this->command->info("\nüìà √âtat actuel de la base de donn√©es:");
        $this->command->info("   - Utilisateurs: {$totalUtilisateurs}");
        $this->command->info("   - Coop√©ratives: {$totalCooperatives}");
        $this->command->info("   - Pr√™t pour les membres √©leveurs: ‚úÖ");
    }
}